// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "url": "https://github.com/FlyKarlik",
            "email": "nikitasavin191@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/users": {
            "get": {
                "description": "Возвращает список пользователей с пагинацией и фильтрацией",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Пользователи"
                ],
                "summary": "Поиск пользователей",
                "parameters": [
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Лимит записей (по умолчанию 10)",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "minimum": 0,
                        "type": "integer",
                        "default": 0,
                        "description": "Смещение (по умолчанию 0)",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фильтр по имени (частичное совпадение)",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фильтр по фамилии (частичное совпадение)",
                        "name": "surname",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фильтр по отчеству (частичное совпадение)",
                        "name": "patronymic",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Фильтр по национальности (точное совпадение)",
                        "name": "nationality",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "MALE",
                            "FEMALE"
                        ],
                        "type": "string",
                        "description": "Фильтр по полу",
                        "name": "sex",
                        "in": "query"
                    },
                    {
                        "maximum": 120,
                        "minimum": 1,
                        "type": "integer",
                        "description": "Фильтр по возрасту (точное совпадение)",
                        "name": "age",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ",
                        "schema": {
                            "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_pkg_generics.ItemsOutput-github_com_FlyKarlik_effectiveMobile_internal_domain_User"
                        }
                    },
                    "400": {
                        "description": "Невалидные параметры запроса",
                        "schema": {
                            "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_delivery_http_response.BaseResponse-any"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_delivery_http_response.BaseResponse-any"
                        }
                    }
                }
            },
            "post": {
                "description": "Создает нового пользователя с указанными данными",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Пользователи"
                ],
                "summary": "Создание пользователя",
                "parameters": [
                    {
                        "description": "Данные для создания пользователя",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_domain.CreateUserInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное создание пользователя",
                        "schema": {
                            "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_delivery_http_response.BaseResponse-any"
                        }
                    },
                    "400": {
                        "description": "Невалидные данные запроса",
                        "schema": {
                            "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_delivery_http_response.BaseResponse-any"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_delivery_http_response.BaseResponse-any"
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "delete": {
                "description": "Удаляет пользователя по его идентификатору",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Пользователи"
                ],
                "summary": "Удаление пользователя",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное удаление",
                        "schema": {
                            "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_delivery_http_response.BaseResponse-any"
                        }
                    },
                    "400": {
                        "description": "Невалидные параметры запроса",
                        "schema": {
                            "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_delivery_http_response.BaseResponse-any"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_delivery_http_response.BaseResponse-any"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_delivery_http_response.BaseResponse-any"
                        }
                    }
                }
            },
            "patch": {
                "description": "Обновляет данные пользователя по его идентификатору",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Пользователи"
                ],
                "summary": "Обновление пользователя",
                "parameters": [
                    {
                        "type": "string",
                        "description": "UUID пользователя",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные для обновления",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_domain.UpdateUserInput"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешное обновление",
                        "schema": {
                            "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_delivery_http_response.BaseResponse-any"
                        }
                    },
                    "400": {
                        "description": "Невалидные параметры запроса",
                        "schema": {
                            "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_delivery_http_response.BaseResponse-any"
                        }
                    },
                    "404": {
                        "description": "Пользователь не найден",
                        "schema": {
                            "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_delivery_http_response.BaseResponse-any"
                        }
                    },
                    "500": {
                        "description": "Внутренняя ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_delivery_http_response.BaseResponse-any"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_FlyKarlik_effectiveMobile_internal_delivery_http_response.BaseResponse-any": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "data": {},
                "error": {},
                "status": {
                    "type": "boolean"
                }
            }
        },
        "github_com_FlyKarlik_effectiveMobile_internal_domain.CreateUserInput": {
            "type": "object",
            "required": [
                "name",
                "surname"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "github_com_FlyKarlik_effectiveMobile_internal_domain.SexEnum": {
            "type": "string",
            "enum": [
                "FEMALE",
                "MALE"
            ],
            "x-enum-varnames": [
                "FemaleSexEnum",
                "MaleSexEnum"
            ]
        },
        "github_com_FlyKarlik_effectiveMobile_internal_domain.UpdateUserInput": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "sex": {
                    "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_domain.SexEnum"
                },
                "surname": {
                    "type": "string"
                }
            }
        },
        "github_com_FlyKarlik_effectiveMobile_internal_domain.User": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "sex": {
                    "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_domain.SexEnum"
                },
                "surname": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "github_com_FlyKarlik_effectiveMobile_pkg_generics.ItemsOutput-github_com_FlyKarlik_effectiveMobile_internal_domain_User": {
            "type": "object",
            "properties": {
                "error": {},
                "items": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/github_com_FlyKarlik_effectiveMobile_internal_domain.User"
                    }
                },
                "success": {
                    "type": "boolean"
                },
                "total": {
                    "type": "integer"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8000",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Users API",
	Description:      "API documentation for the Users backend service.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
